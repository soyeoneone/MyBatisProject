<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lsp.dao.UserDAO">

	<resultMap type="com.lsp.entity.User" id="userList">
		<id column="uid" property="id" />
		<result column="name" property="name" />
		<result column="password" property="password" />
	</resultMap>
	<!--select/update 表名 where 表字段名=类的属性名 -->
	<select id="selectUser" resultType="User">
		select * from user where uid = #{id}
	</select>

	<!-- 如果返回集合的话，需要先定义resultMap -->
	<select id="selectAllUser" resultMap="userList">
		select * from user
	</select>
	<!--执行增加操作的SQL语句。id和parameterType 分别与UserDAO接口中的方法名和 参数类型一致。以#{name}的形式引用User参数 
		的name属性，MyBatis将使用反射读取User参数 的此属性。#{name}中name大小写敏感。setGeneratedKeys设置 
		为"true"表明要MyBatis获取由数据库自动生成的主 键；keyProperty="id"指定把获取到的主键值注入 到User的id属性 -->
	<insert id="insertUser" parameterType="User" useGeneratedKeys="true"
		keyProperty="id">
		insert into user(name,password)
		values(#{name},#{password})
	</insert>

	<update id="updateUser" parameterType="User">
		update user set
		name=#{name},password=#{password} where uid=#{id}
	</update>

	<delete id="deleteUser" parameterType="int">
		delete from user where
		uid=#{id}
	</delete>
</mapper>